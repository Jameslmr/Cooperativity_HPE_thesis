# -*- coding: utf-8 -*-
"""
Created on Tue Jan  4 15:28:00 2022

@author: james
"""


import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize
import mpmath as mp
from cycler import cycler

plt.rcParams.update({'font.size':20})
plt.rcParams.update({'figure.autolayout': 1})
plt.rcParams['legend.fontsize'] = 'small'
plt.rcParams["figure.figsize"] = (8,6)
plt.rcParams['legend.title_fontsize'] = 'small'

#only one data set so can't look at midpoints

# also no disk state
#total/ionizable groups. so 2 is for a 1 to 1 monomer. set so the hydrophobic parameter is a group specific parameter and not dependent on composition. Easier to see if physical values come out.

#cycles through colours and line style for the plots
custom_cycler =(cycler(color= ['#000000', '#0f94d1','#f7ad05','#009e74', '#f02495', '#f2e41d', '#0071b2', '#d55c00']) + cycler(linestyle=['solid', 'dotted', 'dashed', 'dashdot',(0, (5, 10)),(0, (3, 10, 1, 10)),(0, (5, 1)),(0, (1, 1))]))
plt.rc('axes',prop_cycle=custom_cycler)


mcount=0 
def markers(): 
    global mcount 
    mcount+=1
    for i, j in zip(range(mcount), marker_cycle()):
        a=list(j.values())
    return a[0]
    

marker_cycle=(cycler(marker=["o", "v", "*","s","P","d","p","+",]))







#in this version of the script we will actually take an effective M, this means leaving Ph as 1
def Ph():
    return 1




#hydrophobic partition function

def Pa(pH,Gh2,pka2,M,r):
    return mp.power((mp.exp(-Gh2*(r-1))*(1+(mp.power(10,(pH-pka2))))),M)




#def Pd(pH,Gh3,pka3,pka4,M,f,r):
   # return np.vectorize(Pd2(pH,Gh3,pka3,pka4,M,f,r))




#total partition function

def Pt(pH,Gh2,pka2,M,r):
    return Ph()+Pa(pH,Gh2,pka2,M,r)


#defining the fraction of polymer in each state

def fh(pH,Gh2,pka2,M,r):
    return np.array(Ph()/Pt(pH,Gh2,pka2,M,r),dtype=float)
    
def fa(pH,Gh2,pka2,M,r):
    return np.array(Pa(pH,Gh2,pka2,M,r)/Pt(pH,Gh2,pka2,M,r),dtype=float)


    
#actual data

a_raw=np.array([[2.0141, 31.8542],
[2.2133, 32.3007],
[2.4121, 31.8779],
[2.5981, 32.374 ],
[2.8728, 33.5154],
[3.2182, 34.632 ],
[3.417, 34.1098 ],
[3.7182, 35.3506],
[3.9215, 35.0271],
[4.2524, 33.1635],
[4.5482, 32.1196],
[4.9506, 32.168 ],
[5.0872, 30.8265],
[5.2051, 27.5232],
[5.518, 25.1878 ],
[5.9635, 22.4794],
[5.7547, 20.2946],
[6.3041, 12.5943],
[6.4981, 11.3023],
[6.9, 10.2331   ],
[7.1969, 11.4243],
[7.5993, 11.3485],
[8.0064, 11.8936],
[8.4537, 13.4567],
[8.8479, 14.9456],
[9.1574, 14.6715],
[9.4317, 14.9438],
[9.7812, 15.1414]])

ac=np.array([
[3.7182, 35.3506],
[3.9215, 35.0271],
[4.2524, 33.1635],
[4.5482, 32.1196],
[4.9506, 32.168 ],
[5.0872, 30.8265],
[5.2051, 27.5232],
[5.518, 25.1878 ],
[5.9635, 22.4794],
[5.7547, 20.2946],
[6.3041, 12.5943],
[6.4981, 11.3023],
[6.9, 10.2331   ]
])

b_raw=np.array([[2.7151, 7.4679  ],
[4.3046, 7.789   ],
[5.6109, 9.7864  ],
[6.5199, 15.017  ],
[8.303, 14.7395  ],
[10.6126, 14.9816]]
)



plt.figure(0)
plt.scatter(a_raw[:,0],a_raw[:,1],label='Rot. Correlation data',marker=markers())
plt.scatter(b_raw[:,0],b_raw[:,1],label='DLS data',marker=markers())

plt.legend()


#we need to normalize the data, so it is 1 at the highest values and 0 at the lowest. 

a2=(a_raw[:,1]-np.min(a_raw[:,1]))/(np.max(a_raw[:,1]-np.min(a_raw[:,1])))

ac2=(ac[:,1]-np.min(ac[:,1]))/(np.max(ac[:,1]-np.min(ac[:,1])))

b2=(b_raw[:,1]-np.max(b_raw[:,1]))/(-np.max(b_raw[:,1])+np.min(b_raw[:,1])) 




a=np.transpose(np.vstack((a_raw[:,0],a2)))
ac2=np.transpose(np.vstack((ac[:,0],ac2)))
b=np.transpose(np.vstack((b_raw[:,0],b2)))

mcount=0

fig,ax=plt.subplots(num=1)
ax.scatter(ac2[:,0],ac2[:,1],label='Rot. Correlation',marker=markers())
ax.scatter(b[:,0],b[:,1],label='DLS',marker=markers())




#defining our pH dimension
pH_range = np.linspace(1, 11, 1001)

#in t
#need to reduce the parameter space for fitting, we want to fix all pkas and M. For this iteration (number i don' even want to think about it) we will fit delta and f to find an appropriate number for f considering a presuposed value of M. f affects the sharpness.


def fh2(pH,Gh2,M):
    pka2=4.5
    r=2
    return fh(pH,Gh2,pka2,M,r)


fh3=np.vectorize(fh2)

bounds=((0,1),(13,40))

p0=[3,3]
params_a, params_covariance_a = optimize.curve_fit(fh3, ac2[:,0],ac2[:,1],bounds=bounds, p0=p0)

params_b, params_covariance_b = optimize.curve_fit(fh3, b[:,0],b[:,1],bounds=bounds, p0=p0)



ax.plot(pH_range,fh3(pH_range,*params_a))
ax.plot(pH_range,fh3(pH_range,*params_b))
ax.set_xlim((1,12))
ax.set_xlabel('$pH$')
ax.set_ylabel(r'$f_H$')







"""
#lastly we can look at theta
#set Ph to 1 to simplify stuff and set the pka4 high enough that we can ignore the term that comes from it

#i need to apply the mpmath to this section too

def theta(pH,Gh2,pka2,M,r):
    return (mp.power(10,(pH-pka2))/(1+mp.power(10,(pH-pka2))))*(1-fh(pH,Gh2,pka2,M,r))



theta2=np.vectorize(theta)


ax2 = ax.twinx()
ax2.plot(pH_range,theta2(pH_range,params_a[0],4.5,params_a[1],2))
ax2.plot(pH_range,theta2(pH_range,params_b[0],4.5,params_b[1],2))

plt.title('Ionization state')
plt.xlabel('pH')
plt.ylabel('Ionization fraction, \u03F4')
"""

t=np.array([[0.0105, 4.0561 ],
[0.0105, 4.0634 ],
[0.0121, 4.0706 ],
[0.0121, 4.0779 ],
[0.0121, 4.0851 ],
[0.0121, 4.0924 ],
[0.0138, 4.0996 ],
[0.0154, 4.1069 ],
[0.0154, 4.1141 ],
[0.0154, 4.1214 ],
[0.0154, 4.1287 ],
[0.0154, 4.1359 ],
[0.017, 4.1431  ],
[0.0171, 4.1504 ],
[0.0187, 4.1504 ],
[0.0187, 4.1576 ],
[0.0203, 4.1649 ],
[0.0203, 4.1721 ],
[0.0203, 4.1794 ],
[0.0203, 4.1867 ],
[0.022, 4.1939  ],
[0.022, 4.2012  ],
[0.022, 4.2084  ],
[0.0236, 4.2157 ],
[0.0236, 4.2229 ],
[0.0236, 4.2302 ],
[0.0253, 4.2374 ],
[0.0253, 4.2447 ],
[0.0253, 4.2519 ],
[0.0269, 4.2591 ],
[0.0269, 4.2664 ],
[0.0285, 4.2737 ],
[0.0286, 4.2809 ],
[0.0302, 4.2882 ],
[0.0302, 4.2953 ],
[0.0302, 4.3027 ],
[0.0302, 4.3099 ],
[0.0318, 4.3172 ],
[0.0318, 4.3244 ],
[0.0335, 4.3317 ],
[0.0335, 4.3389 ],
[0.0335, 4.3462 ],
[0.0335, 4.3535 ],
[0.0351, 4.3607 ],
[0.0368, 4.3679 ],
[0.0368, 4.3752 ],
[0.0368, 4.3824 ],
[0.0384, 4.3897 ],
[0.0384, 4.3969 ],
[0.0384, 4.4042 ],
[0.0384, 4.4115 ],
[0.0401, 4.4187 ],
[0.0401, 4.426  ],
[0.0417, 4.4332 ],
[0.0417, 4.4405 ],
[0.0417, 4.4477 ],
[0.0417, 4.455  ],
[0.0434, 4.4622 ],
[0.045, 4.4695  ],
[0.045, 4.4767  ],
[0.045, 4.484   ],
[0.0466, 4.4912 ],
[0.0466, 4.4985 ],
[0.0467, 4.5057 ],
[0.0483, 4.513  ],
[0.0483, 4.5202 ],
[0.0499, 4.5274 ],
[0.0499, 4.5347 ],
[0.0499, 4.542  ],
[0.0516, 4.5492 ],
[0.0516, 4.5565 ],
[0.0532, 4.5565 ],
[0.0532, 4.5636 ],
[0.0532, 4.571  ],
[0.0532, 4.5782 ],
[0.0548, 4.5855 ],
[0.0548, 4.5927 ],
[0.0549, 4.6    ],
[0.0549, 4.6072 ],
[0.0565, 4.6145 ],
[0.0565, 4.6217 ],
[0.0581, 4.629  ],
[0.0581, 4.6362 ],
[0.0598, 4.6435 ],
[0.0614, 4.6507 ],
[0.0614, 4.658  ],
[0.0614, 4.6652 ],
[0.0614, 4.6724 ],
[0.0614, 4.6798 ],
[0.0631, 4.687  ],
[0.0631, 4.6943 ],
[0.0647, 4.7015 ],
[0.0663, 4.7086 ],
[0.0663, 4.716  ],
[0.0663, 4.7233 ],
[0.0664, 4.7305 ],
[0.068, 4.7378  ],
[0.068, 4.745   ],
[0.068, 4.7523  ],
[0.068, 4.7595  ],
[0.0695, 4.7668 ],
[0.0697, 4.774  ],
[0.0713, 4.7812 ],
[0.0729, 4.7885 ],
[0.0729, 4.7957 ],
[0.0729, 4.803  ],
[0.0745, 4.8103 ],
[0.0746, 4.8175 ],
[0.0746, 4.8248 ],
[0.0746, 4.8319 ],
[0.0762, 4.8393 ],
[0.0762, 4.8465 ],
[0.0762, 4.8538 ],
[0.0779, 4.861  ],
[0.0779, 4.8683 ],
[0.0779, 4.8755 ],
[0.0779, 4.8828 ],
[0.0795, 4.89   ],
[0.0795, 4.8973 ],
[0.0795, 4.9045 ],
[0.0812, 4.9118 ],
[0.0812, 4.9191 ],
[0.0812, 4.9263 ],
[0.0828, 4.9336 ],
[0.0844, 4.9407 ],
[0.0844, 4.9481 ],
[0.0845, 4.9553 ],
[0.0845, 4.9626 ],
[0.0845, 4.9698 ],
[0.0861, 4.9771 ],
[0.0861, 4.9843 ],
[0.0877, 4.9916 ],
[0.0877, 4.9988 ],
[0.0894, 5.0061 ],
[0.091, 5.0133  ],
[0.091, 5.0206  ],
[0.091, 5.0278  ],
[0.091, 5.0351  ],
[0.091, 5.0423  ],
[0.0927, 5.0496 ],
[0.0927, 5.0568 ],
[0.0927, 5.0641 ],
[0.0943, 5.0713 ],
[0.0959, 5.0786 ],
[0.0959, 5.0858 ],
[0.096, 5.0931  ],
[0.096, 5.1003  ],
[0.0976, 5.1076 ],
[0.0976, 5.1148 ],
[0.0992, 5.1221 ],
[0.0992, 5.1293 ],
[0.1009, 5.1366 ],
[0.1009, 5.1438 ],
[0.1009, 5.1511 ],
[0.1025, 5.1583 ],
[0.1025, 5.1656 ],
[0.1041, 5.1728 ],
[0.1042, 5.1801 ],
[0.1042, 5.1874 ],
[0.1042, 5.1945 ],
[0.1058, 5.2019 ],
[0.1074, 5.2091 ],
[0.1074, 5.2164 ],
[0.1091, 5.2236 ],
[0.1091, 5.2308 ],
[0.1091, 5.2381 ],
[0.1107, 5.2453 ],
[0.1123, 5.2526 ],
[0.1123, 5.2598 ],
[0.1124, 5.2671 ],
[0.114, 5.2743  ],
[0.114, 5.2816  ],
[0.1156, 5.2888 ],
[0.1156, 5.2961 ],
[0.1172, 5.3033 ],
[0.1173, 5.3106 ],
[0.1189, 5.3178 ],
[0.1189, 5.3251 ],
[0.1205, 5.3323 ],
[0.1205, 5.3396 ],
[0.1222, 5.3468 ],
[0.1222, 5.3541 ],
[0.1238, 5.3613 ],
[0.1254, 5.3686 ],
[0.1254, 5.3758 ],
[0.1254, 5.3831 ],
[0.1271, 5.3902 ],
[0.1287, 5.3976 ],
[0.1287, 5.4048 ],
[0.1303, 5.4121 ],
[0.1303, 5.4193 ],
[0.1319, 5.4266 ],
[0.132, 5.4338  ],
[0.1336, 5.4411 ],
[0.1336, 5.4483 ],
[0.1352, 5.4556 ],
[0.1368, 5.4628 ],
[0.1369, 5.4701 ],
[0.1385, 5.4773 ],
[0.1385, 5.4846 ],
[0.1401, 5.4918 ],
[0.1417, 5.499  ],
[0.1417, 5.5063 ],
[0.1434, 5.5135 ],
[0.145, 5.5208  ],
[0.1466, 5.528  ],
[0.1482, 5.5352 ],
[0.1482, 5.5425 ],
[0.1499, 5.5497 ],
[0.1515, 5.557  ],
[0.1515, 5.5643 ],
[0.1531, 5.5715 ],
[0.1547, 5.5788 ],
[0.1564, 5.5859 ],
[0.158, 5.5933  ],
[0.1596, 5.6005 ],
[0.1612, 5.6005 ],
[0.1628, 5.6077 ],
[0.1645, 5.615  ],
[0.1661, 5.6221 ],
[0.1677, 5.6221 ],
[0.1693, 5.6221 ],
[0.1709, 5.6221 ],
[0.1724, 5.6294 ],
[0.1742, 5.6366 ],
[0.1758, 5.6366 ],
[0.1774, 5.6439 ],
[0.179, 5.6511  ],
[0.1806, 5.6511 ],
[0.1822, 5.6583 ],
[0.1838, 5.6583 ],
[0.1855, 5.6656 ],
[0.1871, 5.6728 ],
[0.1887, 5.6728 ],
[0.1903, 5.6728 ],
[0.1919, 5.68   ],
[0.1935, 5.68   ],
[0.1952, 5.6873 ],
[0.1968, 5.6945 ],
[0.1984, 5.6945 ],
[0.2, 5.6945    ],
[0.2016, 5.7017 ],
[0.2032, 5.7017 ],
[0.2049, 5.7088 ],
[0.2065, 5.7088 ],
[0.2081, 5.7162 ],
[0.2097, 5.7161 ],
[0.2113, 5.7234 ],
[0.2129, 5.7234 ],
[0.2145, 5.7306 ],
[0.2162, 5.7306 ],
[0.2178, 5.7306 ],
[0.2194, 5.7378 ],
[0.221, 5.7378  ],
[0.2226, 5.745  ],
[0.2242, 5.745  ],
[0.2242, 5.7523 ],
[0.2258, 5.7523 ],
[0.2275, 5.7595 ],
[0.2291, 5.7595 ],
[0.2307, 5.7595 ],
[0.2323, 5.7595 ],
[0.2339, 5.7667 ],
[0.2355, 5.7667 ],
[0.2355, 5.774  ],
[0.2371, 5.774  ],
[0.2388, 5.7739 ],
[0.2404, 5.7739 ],
[0.242, 5.7812  ],
[0.2436, 5.7812 ],
[0.2436, 5.7884 ],
[0.2452, 5.7884 ],
[0.2468, 5.7884 ],
[0.2484, 5.7884 ],
[0.25, 5.7884   ],
[0.2517, 5.7955 ],
[0.2533, 5.8028 ],
[0.2549, 5.8028 ],
[0.2565, 5.8028 ],
[0.2581, 5.81   ],
[0.2597, 5.81   ],
[0.2614, 5.8173 ],
[0.263, 5.8173  ],
[0.2646, 5.8245 ],
[0.2662, 5.8245 ],
[0.2678, 5.8317 ],
[0.2694, 5.8317 ],
[0.2711, 5.839  ],
[0.2727, 5.8389 ],
[0.2743, 5.8462 ],
[0.2759, 5.8462 ],
[0.2775, 5.8534 ],
[0.2791, 5.8534 ],
[0.2807, 5.8606 ],
[0.2824, 5.8679 ],
[0.284, 5.8679  ],
[0.2856, 5.8751 ],
[0.2872, 5.8751 ],
[0.2888, 5.8822 ],
[0.2905, 5.8896 ],
[0.2921, 5.8968 ],
[0.2937, 5.8968 ],
[0.2953, 5.9041 ],
[0.2969, 5.9113 ],
[0.2985, 5.9113 ],
[0.3002, 5.9184 ],
[0.3018, 5.9258 ],
[0.3034, 5.9257 ],
[0.305, 5.933   ],
[0.3066, 5.9402 ],
[0.3083, 5.9475 ],
[0.3099, 5.9475 ],
[0.3115, 5.9546 ],
[0.3131, 5.9619 ],
[0.3147, 5.9691 ],
[0.3163, 5.9764 ],
[0.318, 5.9764  ],
[0.3195, 5.9837 ],
[0.3212, 5.9836 ],
[0.3228, 5.9909 ],
[0.3244, 5.9981 ],
[0.3261, 6.0054 ],
[0.3277, 6.0054 ],
[0.3293, 6.0126 ],
[0.3309, 6.0198 ],
[0.3325, 6.0198 ],
[0.3341, 6.0271 ],
[0.3357, 6.0343 ],
[0.3374, 6.0416 ],
[0.339, 6.0415  ],
[0.3406, 6.0488 ],
[0.3422, 6.056  ],
[0.3439, 6.0633 ],
[0.3455, 6.0632 ],
[0.3471, 6.0705 ],
[0.3487, 6.0777 ],
[0.3503, 6.085  ],
[0.3519, 6.0922 ],
[0.3536, 6.0922 ],
[0.3552, 6.0994 ],
[0.3568, 6.1067 ],
[0.3584, 6.1139 ],
[0.3599, 6.1212 ],
[0.3617, 6.1212 ],
[0.3633, 6.1211 ],
[0.3633, 6.1284 ],
[0.3649, 6.1356 ],
[0.3665, 6.1429 ],
[0.3681, 6.1429 ],
[0.3698, 6.1501 ],
[0.3714, 6.1574 ],
[0.373, 6.1646  ],
[0.3746, 6.1718 ],
[0.3761, 6.1791 ],
[0.3779, 6.1791 ],
[0.3795, 6.1863 ],
[0.3811, 6.1935 ],
[0.3827, 6.1935 ],
[0.3843, 6.2008 ],
[0.3859, 6.208  ],
[0.3876, 6.2153 ],
[0.3892, 6.2225 ],
[0.3908, 6.2225 ],
[0.3924, 6.2297 ],
[0.394, 6.237   ],
[0.3941, 6.2442 ],
[0.3957, 6.2442 ],
[0.3957, 6.2515 ],
[0.3973, 6.2587 ],
[0.3989, 6.266  ],
[0.4005, 6.2732 ],
[0.4022, 6.2732 ],
[0.4038, 6.2732 ],
[0.4054, 6.2732 ],
[0.407, 6.2804  ],
[0.4086, 6.2876 ],
[0.4102, 6.2949 ],
[0.4118, 6.2949 ],
[0.4119, 6.3021 ],
[0.4135, 6.3094 ],
[0.4151, 6.3166 ],
[0.4167, 6.3166 ],
[0.4183, 6.3237 ],
[0.42, 6.3311   ],
[0.4216, 6.3311 ],
[0.4232, 6.3383 ],
[0.4248, 6.3455 ],
[0.4264, 6.3455 ],
[0.428, 6.3528  ],
[0.4297, 6.3599 ],
[0.4313, 6.3673 ],
[0.4329, 6.3745 ],
[0.4344, 6.3817 ],
[0.4361, 6.389  ],
[0.4378, 6.3961 ],
[0.4394, 6.3961 ],
[0.441, 6.4035  ],
[0.4426, 6.4107 ],
[0.4442, 6.4179 ],
[0.4459, 6.4179 ],
[0.4475, 6.4252 ],
[0.4491, 6.4324 ],
[0.4506, 6.4397 ],
[0.4523, 6.4396 ],
[0.4523, 6.4469 ],
[0.454, 6.4541  ],
[0.4556, 6.4541 ],
[0.4572, 6.4614 ],
[0.4588, 6.4686 ],
[0.4604, 6.4686 ],
[0.462, 6.4758  ],
[0.4637, 6.483  ],
[0.4653, 6.4903 ],
[0.4668, 6.4903 ],
[0.4685, 6.4975 ],
[0.4701, 6.5048 ],
[0.4718, 6.512  ],
[0.4734, 6.5192 ],
[0.475, 6.5265  ],
[0.4766, 6.5265 ],
[0.4782, 6.5337 ],
[0.4799, 6.541  ],
[0.4815, 6.5482 ],
[0.483, 6.5482  ],
[0.4847, 6.5554 ],
[0.4863, 6.5627 ],
[0.488, 6.5699  ],
[0.4896, 6.5699 ],
[0.4896, 6.5772 ],
[0.4912, 6.5844 ],
[0.4928, 6.5917 ],
[0.4944, 6.5916 ],
[0.4961, 6.5989 ],
[0.4977, 6.6061 ],
[0.4993, 6.6134 ],
[0.5009, 6.6134 ],
[0.5025, 6.6206 ],
[0.5041, 6.6278 ],
[0.5058, 6.6351 ],
[0.5074, 6.6423 ],
[0.509, 6.6423  ],
[0.5106, 6.6496 ],
[0.5122, 6.6568 ],
[0.5139, 6.664  ],
[0.5154, 6.6713 ],
[0.5171, 6.6713 ],
[0.5187, 6.6785 ],
[0.5203, 6.6858 ],
[0.522, 6.693   ],
[0.5236, 6.7002 ],
[0.5252, 6.7002 ],
[0.5268, 6.7075 ],
[0.5284, 6.7147 ],
[0.53, 6.7147   ],
[0.5316, 6.7219 ],
[0.5316, 6.7292 ],
[0.5333, 6.7364 ],
[0.5349, 6.7364 ],
[0.5365, 6.7437 ],
[0.5382, 6.7509 ],
[0.5398, 6.7509 ],
[0.5413, 6.7581 ],
[0.543, 6.7654  ],
[0.5446, 6.7726 ],
[0.5462, 6.7726 ],
[0.5479, 6.7798 ],
[0.5495, 6.7871 ],
[0.5511, 6.7943 ],
[0.5527, 6.8016 ],
[0.5543, 6.8088 ],
[0.556, 6.8088  ],
[0.5575, 6.8159 ],
[0.5575, 6.8233 ],
[0.5592, 6.8233 ],
[0.5592, 6.8305 ],
[0.5608, 6.8378 ],
[0.5624, 6.8378 ],
[0.5641, 6.8378 ],
[0.5657, 6.845  ],
[0.5673, 6.8521 ],
[0.5689, 6.8595 ],
[0.5705, 6.8667 ],
[0.5721, 6.8667 ],
[0.5737, 6.8739 ],
[0.5754, 6.8812 ],
[0.577, 6.8883  ],
[0.5786, 6.8957 ],
[0.5802, 6.8957 ],
[0.5803, 6.9029 ],
[0.5819, 6.9102 ],
[0.5835, 6.9174 ],
[0.5851, 6.9174 ],
[0.5867, 6.9245 ],
[0.5884, 6.9319 ],
[0.5899, 6.9319 ],
[0.5916, 6.9391 ],
[0.5932, 6.9463 ],
[0.5948, 6.9536 ],
[0.5965, 6.9607 ],
[0.5981, 6.9681 ],
[0.5997, 6.9752 ],
[0.6013, 6.9826 ],
[0.6029, 6.9898 ],
[0.6045, 6.9898 ],
[0.6046, 6.9969 ],
[0.6046, 7.0043 ],
[0.6061, 7.0043 ],
[0.6078, 7.0043 ],
[0.6094, 7.0115 ],
[0.611, 7.0115  ],
[0.6126, 7.0187 ],
[0.6143, 7.026  ],
[0.6159, 7.026  ],
[0.6175, 7.0332 ],
[0.6175, 7.0405 ],
[0.6191, 7.0477 ],
[0.6207, 7.0477 ],
[0.6223, 7.0549 ],
[0.624, 7.0622  ],
[0.6256, 7.0694 ],
[0.6272, 7.0694 ],
[0.6288, 7.0766 ],
[0.6305, 7.0839 ],
[0.632, 7.0839  ],
[0.6337, 7.0911 ],
[0.6353, 7.0984 ],
[0.6369, 7.1056 ],
[0.6385, 7.1128 ],
[0.6402, 7.1201 ],
[0.6418, 7.1201 ],
[0.6434, 7.1273 ],
[0.6434, 7.1346 ],
[0.645, 7.1346  ],
[0.645, 7.1418  ],
[0.6467, 7.149  ],
[0.6482, 7.1562 ],
[0.6499, 7.1562 ],
[0.6499, 7.1635 ],
[0.6515, 7.1635 ],
[0.6531, 7.1635 ],
[0.6547, 7.1635 ],
[0.6564, 7.1707 ],
[0.658, 7.178   ],
[0.6596, 7.1852 ],
[0.6612, 7.1852 ],
[0.6627, 7.1924 ],
[0.6644, 7.1997 ],
[0.6661, 7.2069 ],
[0.6677, 7.2069 ],
[0.6693, 7.2142 ],
[0.6693, 7.2214 ],
[0.6709, 7.2214 ],
[0.6709, 7.2287 ],
[0.6726, 7.2359 ],
[0.6742, 7.2359 ],
[0.6758, 7.2431 ],
[0.6774, 7.2504 ],
[0.679, 7.2504  ],
[0.6806, 7.2576 ],
[0.6823, 7.2648 ],
[0.6839, 7.2648 ],
[0.6855, 7.2721 ],
[0.6855, 7.2793 ],
[0.6871, 7.2793 ],
[0.6871, 7.2866 ],
[0.6888, 7.2938 ],
[0.6904, 7.2938 ],
[0.692, 7.301   ],
[0.6936, 7.301  ],
[0.6952, 7.3083 ],
[0.6968, 7.3155 ],
[0.6984, 7.3155 ],
[0.7001, 7.3227 ],
[0.7001, 7.33   ],
[0.7017, 7.33   ],
[0.7017, 7.3372 ],
[0.7033, 7.3445 ],
[0.7048, 7.3517 ],
[0.7066, 7.359  ],
[0.7082, 7.3589 ],
[0.7082, 7.3662 ],
[0.7098, 7.3662 ],
[0.7114, 7.3662 ],
[0.713, 7.3734  ],
[0.7146, 7.3734 ],
[0.7163, 7.3806 ],
[0.7179, 7.3879 ],
[0.7195, 7.3879 ],
[0.721, 7.3951  ],
[0.721, 7.4024  ],
[0.7227, 7.4024 ],
[0.7227, 7.4096 ],
[0.7244, 7.4168 ],
[0.726, 7.4241  ],
[0.7276, 7.4241 ],
[0.7292, 7.4313 ],
[0.7308, 7.4313 ],
[0.7325, 7.4385 ],
[0.7341, 7.4458 ],
[0.7357, 7.453  ],
[0.7372, 7.4603 ],
[0.7389, 7.4675 ],
[0.7406, 7.4748 ],
[0.7422, 7.482  ],
[0.7438, 7.482  ],
[0.7438, 7.4892 ],
[0.7454, 7.4892 ],
[0.7469, 7.4965 ],
[0.7486, 7.4965 ],
[0.7503, 7.5037 ],
[0.7519, 7.5037 ],
[0.7519, 7.5109 ],
[0.7534, 7.5182 ],
[0.7551, 7.5182 ],
[0.7567, 7.5253 ],
[0.7568, 7.5327 ],
[0.7584, 7.5327 ],
[0.7584, 7.5399 ],
[0.76, 7.5472   ],
[0.7616, 7.5544 ],
[0.7631, 7.5615 ],
[0.7649, 7.5615 ],
[0.7649, 7.5689 ],
[0.7665, 7.5689 ],
[0.7681, 7.5688 ],
[0.7697, 7.5688 ],
[0.7713, 7.576  ],
[0.7729, 7.5833 ],
[0.7746, 7.5906 ],
[0.7762, 7.5977 ],
[0.7778, 7.605  ],
[0.7793, 7.605  ],
[0.781, 7.6122  ],
[0.7827, 7.6195 ],
[0.7843, 7.6268 ],
[0.7859, 7.634  ],
[0.7859, 7.6413 ],
[0.7875, 7.6412 ],
[0.7875, 7.6484 ],
[0.7892, 7.6557 ],
[0.7908, 7.663  ],
[0.7924, 7.663  ],
[0.794, 7.6702  ],
[0.7955, 7.6775 ],
[0.7972, 7.6846 ],
[0.7989, 7.6919 ],
[0.8005, 7.6919 ],
[0.8021, 7.6992 ],
[0.8037, 7.7064 ],
[0.8053, 7.7064 ],
[0.807, 7.7136  ],
[0.8086, 7.7208 ],
[0.8102, 7.7281 ],
[0.8117, 7.7354 ],
[0.8134, 7.7426 ],
[0.8151, 7.7426 ],
[0.8151, 7.7498 ],
[0.8167, 7.757  ],
[0.8183, 7.757  ],
[0.8199, 7.7643 ],
[0.8215, 7.7715 ],
[0.8232, 7.7788 ],
[0.8248, 7.786  ],
[0.8264, 7.7933 ],
[0.8264, 7.8005 ],
[0.8264, 7.8077 ],
[0.8264, 7.8151 ],
[0.8281, 7.8223 ],
[0.8296, 7.8295 ],
[0.8296, 7.8368 ],
[0.8313, 7.8368 ],
[0.8329, 7.8439 ],
[0.8346, 7.8513 ],
[0.8362, 7.8512 ],
[0.8362, 7.8585 ],
[0.8378, 7.8585 ],
[0.8394, 7.8657 ],
[0.8394, 7.873  ],
[0.841, 7.8801  ],
[0.8427, 7.8875 ],
[0.8443, 7.8875 ],
[0.8443, 7.8947 ],
[0.8458, 7.8947 ],
[0.8475, 7.9019 ],
[0.8491, 7.9019 ],
[0.8507, 7.9019 ],
[0.8507, 7.9092 ],
[0.8524, 7.9163 ],
[0.854, 7.9237  ],
[0.854, 7.9308  ],
[0.8556, 7.9382 ],
[0.8556, 7.9454 ],
[0.8556, 7.9527 ],
[0.8573, 7.9599 ],
[0.8589, 7.9672 ],
[0.8589, 7.9744 ],
[0.8605, 7.9817 ],
[0.862, 7.9889  ],
[0.8638, 7.9961 ],
[0.8654, 7.9961 ],
[0.8654, 8.0034 ],
[0.867, 8.0034  ],
[0.8686, 8.0106 ],
[0.8686, 8.0179 ],
[0.8702, 8.0251 ],
[0.8702, 8.0324 ],
[0.8719, 8.0396 ],
[0.8735, 8.0468 ],
[0.8751, 8.0541 ],
[0.8768, 8.0613 ],
[0.8768, 8.0686 ],
[0.8784, 8.0758 ],
[0.88, 8.0831   ],
[0.8816, 8.0903 ],
[0.8816, 8.0976 ],
[0.8833, 8.1048 ],
[0.8833, 8.1121 ],
[0.8849, 8.1121 ],
[0.8864, 8.1193 ],
[0.8881, 8.1265 ],
[0.8881, 8.1338 ],
[0.8898, 8.141  ],
[0.8914, 8.1482 ],
[0.8914, 8.1555 ],
[0.893, 8.1628  ],
[0.8946, 8.17   ],
[0.8947, 8.1773 ],
[0.8963, 8.1844 ],
[0.8979, 8.1918 ],
[0.8979, 8.199  ],
[0.8995, 8.2063 ],
[0.8996, 8.2135 ],
[0.9012, 8.2208 ],
[0.9028, 8.228  ],
[0.9043, 8.2352 ],
[0.9043, 8.2425 ],
[0.9061, 8.2497 ],
[0.9077, 8.257  ],
[0.9077, 8.2642 ],
[0.9093, 8.2715 ],
[0.9093, 8.2787 ],
[0.9109, 8.286  ],
[0.9125, 8.2932 ],
[0.9125, 8.3005 ],
[0.9142, 8.3077 ],
[0.9142, 8.315  ],
[0.9158, 8.3222 ],
[0.9158, 8.3295 ],
[0.9175, 8.3367 ],
[0.9191, 8.3439 ],
[0.9207, 8.3512 ],
[0.9207, 8.3585 ],
[0.9207, 8.3657 ],
[0.9224, 8.373  ],
[0.924, 8.3801  ],
[0.9256, 8.3874 ],
[0.9272, 8.3947 ],
[0.9287, 8.4019 ]])

ax2=ax.twinx()
ax2.plot(t[:,1],t[:,0],label="Titration")
ax2.set_ylabel(r'$\theta$')
fig.legend(loc="upper right", bbox_to_anchor=(1,0.5), bbox_transform=ax.transAxes)




mcount=0

fig,ax=plt.subplots(num=2)
ax.scatter(ac2[:,0],1-ac2[:,1],label='Rot. Correlation',marker=markers())
ax.scatter(b[:,0],1-b[:,1],label='DLS',marker=markers())




#defining our pH dimension
pH_range = np.linspace(1, 11, 1001)

#in t
#need to reduce the parameter space for fitting, we want to fix all pkas and M. For this iteration (number i don' even want to think about it) we will fit delta and f to find an appropriate number for f considering a presuposed value of M. f affects the sharpness.


def fh2(pH,Gh2,M):
    pka2=4.5
    r=2
    return fh(pH,Gh2,pka2,M,r)


fh3=np.vectorize(fh2)

bounds=((0,1),(13,40))

p0=[3,3]
params_a, params_covariance_a = optimize.curve_fit(fh3, ac2[:,0],ac2[:,1],bounds=bounds, p0=p0)

params_b, params_covariance_b = optimize.curve_fit(fh3, b[:,0],b[:,1],bounds=bounds, p0=p0)



ax.plot(pH_range,1-fh3(pH_range,*params_a))
ax.plot(pH_range,1-fh3(pH_range,*params_b))
ax.set_xlim((1,12))
ax.set_xlabel('$pH$')
ax.set_ylabel(r'$1-f_H$')
ax.set_ylim((-0.05,1.05))


ax2=ax.twinx()
ax2.plot(t[:,1],t[:,0],label="Titration",color='#f7ad05')
ax2.set_ylabel(r'$\theta$')
ax2.set_ylim((-0.05,1.05))
fig.legend(loc="upper right", bbox_to_anchor=(1,0.4), bbox_transform=ax.transAxes,frameon=False,title='PMAA')
##plt.savefig('PMAA.pdf')


#attempting to add an image to the figure

im = plt.imread('PMAA.png') # insert local path of the image.

newax = fig.add_axes([0.18,0.60,0.3,0.3], anchor='SW', zorder=1)
newax.imshow(im)
newax.axis('off')
plt.show()
##plt.savefig('PMAA.pdf')

#%% for the combined plotter
plt.rcParams.update({'font.size':7})
plt.rcParams.update({'figure.autolayout': 1})#forcesa tight lauout
plt.rcParams['legend.fontsize'] =6
plt.rcParams["figure.figsize"] = (12/2.54,5.5/2.54)
plt.rcParams['legend.title_fontsize'] = 'small'
plt.rcParams['lines.markersize'] = 2
plt.rcParams['lines.linewidth'] = 1
mcount=0


ax8.scatter(ac2[:,0],1-ac2[:,1],label='Rot. Correlation',marker=markers())
ax8.scatter(b[:,0],1-b[:,1],label='DLS',marker=markers())




#defining our pH dimension
pH_range = np.linspace(1, 11, 1001)

#in t
#need to reduce the parameter space for fitting, we want to fix all pkas and M. For this iteration (number i don' even want to think about it) we will fit delta and f to find an appropriate number for f considering a presuposed value of M. f affects the sharpness.


def fh2(pH,Gh2,M):
    pka2=4.5
    r=2
    return fh(pH,Gh2,pka2,M,r)


fh3=np.vectorize(fh2)

bounds=((0,1),(13,40))

p0=[3,3]
params_a, params_covariance_a = optimize.curve_fit(fh3, ac2[:,0],ac2[:,1],bounds=bounds, p0=p0)

params_b, params_covariance_b = optimize.curve_fit(fh3, b[:,0],b[:,1],bounds=bounds, p0=p0)



ax8.plot(pH_range,1-fh3(pH_range,*params_a))
ax8.plot(pH_range,1-fh3(pH_range,*params_b))
ax8.set_xlim((1,12))
ax8.set_xlabel('$pH$')
ax8.set_ylabel(r'$1-f_H$ , $\theta$')
ax8.set_ylim((-0.05,1.05))


#ax4=ax8.twinx()
ax8.plot(t[:,1],t[:,0],label="Titration",color='#f7ad05')
#ax4.set_ylabel(r'$\theta$')
ax8.set_ylim((-0.05,1.05))
fig9.legend(loc="upper right", bbox_to_anchor=(1.0,0.4), bbox_transform=ax8.transAxes,frameon=False,title='PMAA')
##plt.savefig('PMAA.pdf')


#attempting to add an image to the figure

im = plt.imread('Figure_3_3_a_structure.png') # insert local path of the image.

newax = fig9.add_axes([0.33,0.5,0.55,0.3], anchor='SW', zorder=1)
newax.imshow(im)
newax.axis('off')
plt.show()
##plt.savefig('PMAA.pdf')
